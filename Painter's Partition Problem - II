class Solution {
  public:
    bool isPossible(vector<int> arr, int n, int k, int maxAllowedTime) {
        int painters = 1, time = 0;
        
        for(int i=0; i<n; i++) {
            if(arr[i] > maxAllowedTime) { //not possible 
                return false;
            }
            if((time + arr[i]) <= maxAllowedTime) {
                time += arr[i];
            }
            else {
                painters++;
                time = arr[i];
            }  
        }
        return (painters <= k) ? true : false;
    }

    int minTime(vector<int>& arr, int k) {
        int sum = 0, n = arr.size();
        
        if(k > n) return -1; //edge case
        
        for(int i=0; i<n; i++) {
            sum += arr[i];
        }
        
        int st = *max_element(arr.begin(), arr.end()), end = sum, ans = -1;
        
        while(st <= end) {
            int mid = st + (end-st)/2;
            
            if(isPossible(arr,n,k,mid)) { //left
                ans = mid;
                end = mid - 1;
            }
            else { //right
                st = mid + 1;
            }
        }
        return ans;
    }
};
